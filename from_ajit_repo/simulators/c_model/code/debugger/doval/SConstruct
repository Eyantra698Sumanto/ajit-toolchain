import os

env = Environment(ENV = {'PATH' : os.environ['PATH']})
#Import('COMPILATION_FLAGS')
#Import('DEBUG_COMPILATION_FLAGS')
COMPILATION_FLAGS=' -g -DSW -Wall '
DEBUG_COMPILATION_FLAGS = COMPILATION_FLAGS + ' -DDEBUG'

DEBUG_COMPILATION_FLAGS = DEBUG_COMPILATION_FLAGS + " -Wno-unused-variable -Wno-unused-function"
# Build the antlr library and the Parser, Lexer source files
if not env.GetOption('clean'):
	SConscript(['antlr3Cruntime/SConscript'])
	SConscript(['grammar/SConscript'])

AHIR_RELEASE=os.environ['AHIR_RELEASE']
env.Append(CPPPATH = './src/:./include:./antlr3Cruntime/build/include:')
env.Append(CPPPATH = '../spi_common/src:../spi_common/include:')

AJIT_C_REF_MODEL=os.environ['AJIT_C_REF_MODEL']

env.Append(CPPPATH = AJIT_C_REF_MODEL + "/cpu/src:" + AJIT_C_REF_MODEL + "/cpu/include:")
env.Append(CPPPATH = AJIT_C_REF_MODEL + "/common/src:" + AJIT_C_REF_MODEL + "/common/include:")
env.Append(CPPPATH = AJIT_C_REF_MODEL + "/mmu/include:" + AJIT_C_REF_MODEL + "/cache/include:")
env.Append(CPPPATH = AJIT_C_REF_MODEL + "/debugger/hwServer/include:")
env.Append(CPPPATH = AJIT_C_REF_MODEL + "/monitorLogger/include:")
env.Append(CPPPATH = AJIT_C_REF_MODEL + "/rlut/include:")

#AHIR-related
PIPE_HANDLER_INCLUDE=AHIR_RELEASE + "/include"
PIPE_HANDLER_LIBPATH = AHIR_RELEASE + "/lib"
PTHREAD_UTILS = AHIR_RELEASE + "/include"
GNU_PTH_UTILS = AHIR_RELEASE + "/include"
FUNCTIONLIB_PATH = AHIR_RELEASE + "/functionLibrary/lib"
env.Append(CPPPATH = PIPE_HANDLER_INCLUDE + ":" + PTHREAD_UTILS + ":" + GNU_PTH_UTILS + ":" + "./include:")

#Create hwServer library
#env.SharedLibrary('./lib/libdoval', Glob('src/*.c'), CCFLAGS=DEBUG_COMPILATION_FLAGS)
env.Library('./lib/libdoval', Glob('src/*.c'), CCFLAGS=DEBUG_COMPILATION_FLAGS)
